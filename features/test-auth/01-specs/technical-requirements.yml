# Technical Requirements Template
# Phase 1: Specifications | Technical Requirements Definition
# ================================================================

technical_requirements:
  # Feature identification
  feature_id: "FEAT807"
  feature_name: "test-auth"
  version: "1.0.0"
  created_date: "2025-07-19"
  created_by: "development-team"
  
  # Architecture requirements
  architecture:
    pattern: "{{ARCHITECTURE_PATTERN}}"  # e.g., "Layered Architecture", "Microservices", "Event-Driven"
    style: "{{ARCHITECTURE_STYLE}}"  # e.g., "REST API", "GraphQL", "Event Sourcing"
    
    # Component structure
    components:
      - name: "{{COMPONENT_NAME_1}}"  # e.g., "AuthService"
        type: "{{COMPONENT_TYPE_1}}"  # e.g., "Application Service"
        layer: "{{LAYER_1}}"  # e.g., "Application Layer"
        responsibilities: 
          - "{{RESPONSIBILITY_1}}"  # e.g., "User authentication"
          - "{{RESPONSIBILITY_2}}"  # e.g., "Token management"
      
      - name: "{{COMPONENT_NAME_2}}"  # e.g., "UserRepository"
        type: "{{COMPONENT_TYPE_2}}"  # e.g., "Data Access"
        layer: "{{LAYER_2}}"  # e.g., "Infrastructure Layer"
        responsibilities:
          - "{{RESPONSIBILITY_1}}"
          - "{{RESPONSIBILITY_2}}"
    
    # Technology stack
    technologies:
      programming_language: "{{LANGUAGE}}"  # e.g., "Python 3.12+"
      framework: "{{FRAMEWORK}}"  # e.g., "FastAPI", "Django", "Flask"
      database: "{{DATABASE}}"  # e.g., "PostgreSQL 15+"
      cache: "{{CACHE}}"  # e.g., "Redis 7+"
      message_queue: "{{MESSAGE_QUEUE}}"  # e.g., "RabbitMQ", "Apache Kafka"
      
    # Deployment architecture
    deployment:
      containerization: "{{CONTAINER_TECH}}"  # e.g., "Docker"
      orchestration: "{{ORCHESTRATION}}"  # e.g., "Kubernetes", "Docker Compose"
      cloud_provider: "{{CLOUD_PROVIDER}}"  # e.g., "AWS", "Azure", "GCP"
      deployment_strategy: "{{DEPLOYMENT_STRATEGY}}"  # e.g., "Blue-Green", "Rolling"
  
  # Data model requirements
  data_model:
    # Database entities
    entities:
      - name: "{{ENTITY_NAME_1}}"  # e.g., "User"
        type: "{{ENTITY_TYPE_1}}"  # e.g., "Aggregate Root", "Entity", "Value Object"
        description: "{{ENTITY_DESCRIPTION_1}}"
        
        attributes:
          - name: "{{ATTRIBUTE_NAME_1}}"  # e.g., "id"
            type: "{{ATTRIBUTE_TYPE_1}}"  # e.g., "UUID"
            constraints: ["{{CONSTRAINT_1}}", "{{CONSTRAINT_2}}"]  # e.g., ["primary_key", "not_null"]
            description: "{{ATTRIBUTE_DESCRIPTION_1}}"
          
          - name: "{{ATTRIBUTE_NAME_2}}"  # e.g., "email"
            type: "{{ATTRIBUTE_TYPE_2}}"  # e.g., "string"
            constraints: ["{{CONSTRAINT_1}}", "{{CONSTRAINT_2}}"]  # e.g., ["unique", "not_null"]
            description: "{{ATTRIBUTE_DESCRIPTION_2}}"
        
        indexes:
          - name: "{{INDEX_NAME_1}}"  # e.g., "idx_user_email"
            columns: ["{{COLUMN_1}}"]  # e.g., ["email"]
            type: "{{INDEX_TYPE_1}}"  # e.g., "unique", "btree"
        
        relationships:
          - name: "{{RELATIONSHIP_NAME_1}}"  # e.g., "sessions"
            type: "{{RELATIONSHIP_TYPE_1}}"  # e.g., "one_to_many"
            target: "{{TARGET_ENTITY_1}}"  # e.g., "UserSession"
            foreign_key: "{{FOREIGN_KEY_1}}"  # e.g., "user_id"
    
    # Data validation rules
    validation_rules:
      - entity: "{{ENTITY_NAME}}"
        field: "{{FIELD_NAME}}"
        rule: "{{VALIDATION_RULE}}"  # e.g., "email format", "minimum length 8"
        error_message: "{{ERROR_MESSAGE}}"
    
    # Data migration strategy
    migration:
      strategy: "{{MIGRATION_STRATEGY}}"  # e.g., "versioned migrations", "zero-downtime"
      tools: ["{{MIGRATION_TOOL_1}}", "{{MIGRATION_TOOL_2}}"]  # e.g., ["Alembic", "Liquibase"]
      rollback_strategy: "{{ROLLBACK_STRATEGY}}"
  
  # API design requirements
  api_design:
    # API specifications
    style: "{{API_STYLE}}"  # e.g., "RESTful", "GraphQL", "gRPC"
    version: "{{API_VERSION}}"  # e.g., "v1"
    base_url: "{{BASE_URL}}"  # e.g., "/api/v1"
    
    # Endpoints
    endpoints:
      - path: "{{ENDPOINT_PATH_1}}"  # e.g., "/auth/login"
        method: "{{HTTP_METHOD_1}}"  # e.g., "POST"
        purpose: "{{ENDPOINT_PURPOSE_1}}"  # e.g., "User authentication"
        request_schema: "{{REQUEST_SCHEMA_1}}"  # e.g., "LoginRequest"
        response_schema: "{{RESPONSE_SCHEMA_1}}"  # e.g., "AuthResponse"
        
        security:
          authentication: "{{AUTH_METHOD}}"  # e.g., "none", "bearer_token"
          authorization: "{{AUTHZ_METHOD}}"  # e.g., "none", "role_based"
        
        rate_limiting:
          requests_per_minute: "{{RATE_LIMIT}}"  # e.g., "60"
          burst_limit: "{{BURST_LIMIT}}"  # e.g., "10"
      
      - path: "{{ENDPOINT_PATH_2}}"
        method: "{{HTTP_METHOD_2}}"
        purpose: "{{ENDPOINT_PURPOSE_2}}"
        request_schema: "{{REQUEST_SCHEMA_2}}"
        response_schema: "{{RESPONSE_SCHEMA_2}}"
        
        security:
          authentication: "{{AUTH_METHOD}}"
          authorization: "{{AUTHZ_METHOD}}"
        
        rate_limiting:
          requests_per_minute: "{{RATE_LIMIT}}"
          burst_limit: "{{BURST_LIMIT}}"
    
    # API standards
    standards:
      request_format: "{{REQUEST_FORMAT}}"  # e.g., "JSON"
      response_format: "{{RESPONSE_FORMAT}}"  # e.g., "JSON"
      error_format: "{{ERROR_FORMAT}}"  # e.g., "RFC 7807 Problem Details"
      documentation: "{{DOCS_FORMAT}}"  # e.g., "OpenAPI 3.0"
      versioning: "{{VERSIONING_STRATEGY}}"  # e.g., "URL path versioning"
  
  # Integration requirements
  integration:
    # External services
    external_services:
      - name: "{{SERVICE_NAME_1}}"  # e.g., "EmailService"
        type: "{{SERVICE_TYPE_1}}"  # e.g., "REST API", "Message Queue"
        purpose: "{{SERVICE_PURPOSE_1}}"  # e.g., "Send notifications"
        
        connection:
          protocol: "{{PROTOCOL_1}}"  # e.g., "HTTPS", "AMQP"
          endpoint: "{{ENDPOINT_1}}"  # e.g., "https://api.emailservice.com"
          authentication: "{{AUTH_TYPE_1}}"  # e.g., "API Key", "OAuth 2.0"
          timeout: "{{TIMEOUT_1}}"  # e.g., "10 seconds"
        
        error_handling:
          strategy: "{{ERROR_STRATEGY_1}}"  # e.g., "Circuit breaker", "Retry with backoff"
          retry_attempts: "{{RETRY_ATTEMPTS_1}}"
          fallback: "{{FALLBACK_1}}"  # e.g., "Local logging"
        
        monitoring:
          health_check: "{{HEALTH_CHECK_1}}"
          metrics: ["{{METRIC_1}}", "{{METRIC_2}}"]  # e.g., ["response_time", "error_rate"]
    
    # Internal dependencies
    internal_dependencies:
      - name: "{{DEPENDENCY_NAME_1}}"  # e.g., "UserManagement"
        type: "{{DEPENDENCY_TYPE_1}}"  # e.g., "Internal Service", "Shared Library"
        purpose: "{{DEPENDENCY_PURPOSE_1}}"
        interface: "{{INTERFACE_1}}"  # e.g., "IUserManagementService"
        
        communication:
          pattern: "{{COMM_PATTERN_1}}"  # e.g., "Direct method calls", "Event messaging"
          protocol: "{{COMM_PROTOCOL_1}}"  # e.g., "HTTP", "In-process"
          
  # Quality attributes
  quality_attributes:
    # Performance requirements
    performance:
      response_time:
        target: "{{RESPONSE_TIME_TARGET}}"  # e.g., "< 100ms"
        threshold: "{{RESPONSE_TIME_THRESHOLD}}"  # e.g., "< 200ms"
        measurement: "{{MEASUREMENT_METHOD}}"  # e.g., "95th percentile"
      
      throughput:
        target: "{{THROUGHPUT_TARGET}}"  # e.g., "> 1000 req/s"
        threshold: "{{THROUGHPUT_THRESHOLD}}"  # e.g., "> 500 req/s"
        concurrent_users: "{{CONCURRENT_USERS}}"  # e.g., "100"
      
      resource_usage:
        memory:
          target: "{{MEMORY_TARGET}}"  # e.g., "< 256MB"
          threshold: "{{MEMORY_THRESHOLD}}"  # e.g., "< 512MB"
        cpu:
          target: "{{CPU_TARGET}}"  # e.g., "< 25%"
          threshold: "{{CPU_THRESHOLD}}"  # e.g., "< 50%"
    
    # Scalability requirements
    scalability:
      horizontal_scaling: "{{HORIZONTAL_SCALING}}"  # e.g., "supported", "not_required"
      vertical_scaling: "{{VERTICAL_SCALING}}"
      max_instances: "{{MAX_INSTANCES}}"  # e.g., "10"
      auto_scaling:
        enabled: "{{AUTO_SCALING}}"  # e.g., true, false
        triggers: ["{{TRIGGER_1}}", "{{TRIGGER_2}}"]  # e.g., ["cpu > 70%", "memory > 80%"]
    
    # Reliability requirements
    reliability:
      availability:
        target: "{{AVAILABILITY_TARGET}}"  # e.g., "99.9%"
        downtime_budget: "{{DOWNTIME_BUDGET}}"  # e.g., "8.76 hours/year"
      
      fault_tolerance:
        strategy: "{{FAULT_TOLERANCE}}"  # e.g., "Graceful degradation"
        recovery_time: "{{RECOVERY_TIME}}"  # e.g., "< 5 minutes"
        data_consistency: "{{CONSISTENCY_MODEL}}"  # e.g., "Eventually consistent"
      
      backup_recovery:
        backup_frequency: "{{BACKUP_FREQUENCY}}"  # e.g., "Daily"
        recovery_point_objective: "{{RPO}}"  # e.g., "1 hour"
        recovery_time_objective: "{{RTO}}"  # e.g., "4 hours"
    
    # Security requirements
    security:
      authentication:
        method: "{{AUTH_METHOD}}"  # e.g., "JWT tokens"
        token_expiry: "{{TOKEN_EXPIRY}}"  # e.g., "15 minutes"
        refresh_strategy: "{{REFRESH_STRATEGY}}"  # e.g., "Refresh tokens"
      
      authorization:
        model: "{{AUTHZ_MODEL}}"  # e.g., "RBAC", "ABAC"
        granularity: "{{AUTHZ_GRANULARITY}}"  # e.g., "Resource-level"
      
      data_protection:
        encryption_at_rest: "{{ENCRYPTION_REST}}"  # e.g., "AES-256"
        encryption_in_transit: "{{ENCRYPTION_TRANSIT}}"  # e.g., "TLS 1.3"
        key_management: "{{KEY_MANAGEMENT}}"  # e.g., "AWS KMS", "HashiCorp Vault"
      
      audit_logging:
        events: ["{{AUDIT_EVENT_1}}", "{{AUDIT_EVENT_2}}"]  # e.g., ["login", "permission_change"]
        retention: "{{LOG_RETENTION}}"  # e.g., "90 days"
        format: "{{LOG_FORMAT}}"  # e.g., "Structured JSON"

# Technical constraints
constraints:
  # Technology constraints
  technology:
    - constraint: "{{TECH_CONSTRAINT_1}}"  # e.g., "Must use existing PostgreSQL database"
      reason: "{{CONSTRAINT_REASON_1}}"  # e.g., "Infrastructure standardization"
      impact: "{{CONSTRAINT_IMPACT_1}}"  # e.g., "Limited to PostgreSQL features"
    
    - constraint: "{{TECH_CONSTRAINT_2}}"
      reason: "{{CONSTRAINT_REASON_2}}"
      impact: "{{CONSTRAINT_IMPACT_2}}"
  
  # Resource constraints
  resources:
    - constraint: "{{RESOURCE_CONSTRAINT_1}}"  # e.g., "Maximum 4 CPU cores per instance"
      reason: "{{CONSTRAINT_REASON_1}}"
      impact: "{{CONSTRAINT_IMPACT_1}}"
  
  # Integration constraints
  integration:
    - constraint: "{{INTEGRATION_CONSTRAINT_1}}"  # e.g., "Must integrate with legacy LDAP system"
      reason: "{{CONSTRAINT_REASON_1}}"
      impact: "{{CONSTRAINT_IMPACT_1}}"

# Technical risks
technical_risks:
  - risk_id: "TECH_RISK001"
    description: "{{RISK_DESCRIPTION}}"  # e.g., "Database performance bottleneck"
    category: "{{RISK_CATEGORY}}"  # e.g., "Performance", "Security", "Integration"
    probability: "{{PROBABILITY}}"  # low | medium | high
    impact: "{{IMPACT}}"  # low | medium | high
    mitigation: "{{MITIGATION}}"  # e.g., "Database query optimization and caching"
    contingency: "{{CONTINGENCY}}"  # e.g., "Database sharding implementation"
    owner: "{{RISK_OWNER}}"

# Validation criteria
technical_validation:
  architecture_validation:
    - "Architecture pattern supports scalability requirements"
    - "Component design follows SOLID principles"
    - "Integration patterns are well-defined"
    - "Technology choices align with constraints"
  
  performance_validation:
    - "Performance targets are measurable and achievable"
    - "Resource requirements are realistic"
    - "Scalability strategy is feasible"
    - "Bottlenecks are identified and addressed"
  
  security_validation:
    - "Security controls are comprehensive"
    - "Authentication and authorization are properly designed"
    - "Data protection requirements are met"
    - "Audit logging covers all security events"

# Implementation guidance
implementation_guidance:
  development_approach:
    methodology: "{{METHODOLOGY}}"  # e.g., "Test-Driven Development"
    coding_standards: "{{CODING_STANDARDS}}"  # e.g., "PEP 8 for Python"
    code_review: "{{CODE_REVIEW_PROCESS}}"
    documentation: "{{DOCUMENTATION_STANDARDS}}"
  
  testing_strategy:
    unit_testing: "{{UNIT_TEST_REQUIREMENTS}}"  # e.g., "> 95% coverage"
    integration_testing: "{{INTEGRATION_TEST_REQUIREMENTS}}"
    performance_testing: "{{PERFORMANCE_TEST_REQUIREMENTS}}"
    security_testing: "{{SECURITY_TEST_REQUIREMENTS}}"
  
  deployment_strategy:
    environments: ["{{ENV_1}}", "{{ENV_2}}", "{{ENV_3}}"]  # e.g., ["dev", "staging", "prod"]
    ci_cd: "{{CI_CD_REQUIREMENTS}}"
    monitoring: "{{MONITORING_REQUIREMENTS}}"
    alerting: "{{ALERTING_REQUIREMENTS}}"

# Next phase preparation
next_phase_inputs:
  design_requirements:
    - "{{DESIGN_REQ_1}}"  # e.g., "Detailed component interface design"
    - "{{DESIGN_REQ_2}}"  # e.g., "Database schema design"
    - "{{DESIGN_REQ_3}}"  # e.g., "API specification design"
  
  technical_decisions:
    - decision: "{{TECH_DECISION_1}}"  # e.g., "Use JWT for authentication"
      rationale: "{{DECISION_RATIONALE_1}}"
      alternatives_considered: ["{{ALT_1}}", "{{ALT_2}}"]
      implications: ["{{IMPLICATION_1}}", "{{IMPLICATION_2}}"]