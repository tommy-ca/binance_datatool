---
# Grafana ConfigMap for Datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observability
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.observability:9090
      isDefault: true
      editable: true
      
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-ui.observability:16686
      editable: true
      
    - name: OpenTelemetry
      type: prometheus
      access: proxy
      url: http://otel-collector.observability:8889
      editable: true

---
# Grafana ConfigMap for Dashboards Provider
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: observability
data:
  providers.yaml: |
    apiVersion: 1
    providers:
    - name: 'crypto-lakehouse'
      orgId: 1
      folder: 'Crypto Lakehouse'
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards

---
# Grafana ConfigMap for Main Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-main
  namespace: observability
data:
  crypto-lakehouse-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Crypto Lakehouse - Local Development",
        "tags": ["crypto-lakehouse", "local"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "System Overview",
            "type": "stat",
            "targets": [
              {
                "expr": "up",
                "legendFormat": "{{job}} - {{instance}}"
              }
            ],
            "gridPos": {"h": 4, "w": 24, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "s5cmd Operations Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(s5cmd_operations_total[5m])",
                "legendFormat": "Operations/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 4}
          },
          {
            "id": 3,
            "title": "s5cmd Throughput",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(s5cmd_bytes_transferred_total[5m]) / 1024 / 1024",
                "legendFormat": "Throughput MB/s"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 4}
          },
          {
            "id": 4,
            "title": "Prefect Workflows",
            "type": "graph",
            "targets": [
              {
                "expr": "prefect_workflow_runs_running_total",
                "legendFormat": "Running Workflows"
              },
              {
                "expr": "rate(prefect_workflow_runs_completed_total[5m])",
                "legendFormat": "Completed/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 12}
          },
          {
            "id": 5,
            "title": "MinIO Storage Utilization",
            "type": "graph",
            "targets": [
              {
                "expr": "(minio_cluster_capacity_usable_total_bytes - minio_cluster_capacity_usable_free_bytes) / minio_cluster_capacity_usable_total_bytes * 100",
                "legendFormat": "Storage Used %"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 12}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "30s"
      }
    }

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
  labels:
    app: grafana
    component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: visualization
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
          name: grafana
          
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin123
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        - name: GF_SERVER_ROOT_URL
          value: "http://localhost:3000"
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_LOG_LEVEL
          value: "info"
          
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
            
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboard-main
          mountPath: /var/lib/grafana/dashboards
          
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: grafana-dashboard-main
        configMap:
          name: grafana-dashboard-main

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: observability
  labels:
    app: grafana
    component: visualization
spec:
  selector:
    app: grafana
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
    protocol: TCP
  type: ClusterIP