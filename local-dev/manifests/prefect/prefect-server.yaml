---
# PostgreSQL for Prefect Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: prefect
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: prefect
        - name: POSTGRES_USER
          value: prefect
        - name: POSTGRES_PASSWORD
          value: prefect123
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - prefect
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - prefect
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: prefect
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: prefect
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP

---
# Redis for Prefect Cache/Queue
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: prefect
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        args:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: prefect
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  type: ClusterIP

---
# Prefect Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server
  namespace: prefect
  labels:
    app: prefect-server
    component: orchestration
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prefect-server
  template:
    metadata:
      labels:
        app: prefect-server
        component: orchestration
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4200"
        prometheus.io/path: "/api/metrics"
    spec:
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres.prefect -p 5432 -U prefect; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      containers:
      - name: prefect-server
        image: prefecthq/prefect:3.0.8-python3.11
        ports:
        - containerPort: 4200
          name: api
        env:
        - name: PREFECT_SERVER_API_HOST
          value: "0.0.0.0"
        - name: PREFECT_SERVER_API_PORT
          value: "4200"
        - name: PREFECT_API_DATABASE_CONNECTION_URL
          value: "postgresql+asyncpg://prefect:prefect123@postgres.prefect:5432/prefect"
        - name: PREFECT_SERVER_ANALYTICS_ENABLED
          value: "false"
        - name: PREFECT_LOGGING_LEVEL
          value: "INFO"
        - name: PREFECT_API_SERVICES_SCHEDULER_ENABLED
          value: "true"
        - name: PREFECT_API_SERVICES_LATE_RUNS_ENABLED
          value: "true"
        - name: PREFECT_API_SERVICES_PAUSE_ON_SHUTDOWN
          value: "true"
        - name: PREFECT_EXPERIMENTAL_ENABLE_ARTIFACTS
          value: "true"
        - name: PREFECT_EXPERIMENTAL_ENABLE_NEW_ENGINE
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.observability:4318"
        - name: OTEL_EXPORTER_OTLP_PROTOCOL
          value: "http/protobuf"
        - name: OTEL_SERVICE_NAME
          value: "prefect-server"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=prefect-server,service.version=3.0.8,environment=local"
        command:
        - prefect
        - server
        - start
        - --host
        - "0.0.0.0"
        - --port
        - "4200"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 4200
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 4200
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: prefect-server
  namespace: prefect
  labels:
    app: prefect-server
    component: orchestration
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4200"
    prometheus.io/path: "/api/metrics"
spec:
  selector:
    app: prefect-server
  ports:
  - name: api
    port: 4200
    targetPort: 4200
    protocol: TCP
  type: ClusterIP

---
# Prefect Worker
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-worker
  namespace: prefect
  labels:
    app: prefect-worker
    component: execution
spec:
  replicas: 2
  selector:
    matchLabels:
      app: prefect-worker
  template:
    metadata:
      labels:
        app: prefect-worker
        component: execution
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: prefect-worker
        image: prefecthq/prefect:3.0.8-python3.11
        ports:
        - containerPort: 8080
          name: metrics
        env:
        - name: PREFECT_API_URL
          value: "http://prefect-server.prefect:4200/api"
        - name: PREFECT_WORKER_PREFETCH_SECONDS
          value: "30"
        - name: PREFECT_WORKER_QUERY_SECONDS
          value: "5"
        - name: PREFECT_LOGGING_LEVEL
          value: "INFO"
        - name: PREFECT_EXPERIMENTAL_ENABLE_NEW_ENGINE
          value: "true"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.observability:4318"
        - name: OTEL_EXPORTER_OTLP_PROTOCOL
          value: "http/protobuf"
        - name: OTEL_SERVICE_NAME
          value: "prefect-worker"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=prefect-worker,service.version=3.0.8,environment=local"
        - name: PYTHONPATH
          value: "/opt/prefect/flows"
        command:
        - prefect
        - worker
        - start
        - --pool
        - "default-agent-pool"
        - --type
        - "process"
        - --limit
        - "10"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - name: worker-storage
          mountPath: /opt/prefect/flows
        - name: s5cmd-config
          mountPath: /opt/prefect/s5cmd
        livenessProbe:
          exec:
            command:
            - pgrep
            - -f
            - "prefect worker"
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - pgrep
            - -f
            - "prefect worker"
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: worker-storage
        emptyDir: {}
      - name: s5cmd-config
        configMap:
          name: s5cmd-config

---
# s5cmd ConfigMap for Prefect Worker
apiVersion: v1
kind: ConfigMap
metadata:
  name: s5cmd-config
  namespace: prefect
data:
  s5cmd.json: |
    {
      "version": "v2.2.2",
      "log_level": "info",
      "retry_count": 3,
      "concurrency": 10,
      "part_size": "16MB",
      "multipart_threshold": "64MB",
      "multipart_chunksize": "16MB",
      "endpoint_url": "http://minio-service.minio:9000",
      "use_list_objects_v1": false,
      "dry_run": false
    }

---
# Service for Prefect Worker metrics
apiVersion: v1
kind: Service
metadata:
  name: prefect-worker
  namespace: prefect
  labels:
    app: prefect-worker
    component: execution
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: prefect-worker
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP