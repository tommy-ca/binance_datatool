---
# MinIO Storage for Local Development
# Crypto Lakehouse Data Layer
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: minio
  labels:
    app: minio
    component: object-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
        component: object-storage
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/minio/v2/metrics/cluster"
    spec:
      containers:
      - name: minio
        image: minio/minio:RELEASE.2024-07-16T23-46-41Z
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9001
          name: console
        env:
        - name: MINIO_ROOT_USER
          value: "minioadmin"
        - name: MINIO_ROOT_PASSWORD
          value: "minioadmin123"
        - name: MINIO_BROWSER_REDIRECT_URL
          value: "http://localhost:9001"
        - name: MINIO_SERVER_URL
          value: "http://localhost:9000"
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        - name: MINIO_PROMETHEUS_URL
          value: "http://prometheus.observability:9090"
        - name: MINIO_PROMETHEUS_JOB_ID
          value: "minio-local"
        - name: MINIO_API_CORS_ALLOW_ORIGIN
          value: "*"
        - name: MINIO_CONSOLE_PBKDF_PASSPHRASE
          value: "crypto-lakehouse-local"
        - name: MINIO_CONSOLE_PBKDF_SALT
          value: "local-dev-salt"
        command:
        - /bin/bash
        - -c
        args:
        - |
          mkdir -p /data/crypto-lakehouse-data
          mkdir -p /data/crypto-lakehouse-logs  
          mkdir -p /data/crypto-lakehouse-artifacts
          mkdir -p /data/crypto-lakehouse-backups
          minio server /data --console-address ":9001" --address ":9000"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: minio
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 20Gi

---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: minio
  labels:
    app: minio
    component: object-storage
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9000"
    prometheus.io/path: "/minio/v2/metrics/cluster"
spec:
  selector:
    app: minio
  ports:
  - name: api
    port: 9000
    targetPort: 9000
    protocol: TCP
  - name: console
    port: 9001
    targetPort: 9001
    protocol: TCP
  type: ClusterIP

---
# MinIO Client Job for Bucket Creation
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-setup
  namespace: minio
  labels:
    app: minio-setup
    component: initialization
spec:
  template:
    metadata:
      labels:
        app: minio-setup
        component: initialization
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-minio
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          until nc -z minio-service.minio 9000; do
            echo "Waiting for MinIO to be ready..."
            sleep 5
          done
          echo "MinIO is ready!"
      containers:
      - name: mc
        image: minio/mc:RELEASE.2024-07-11T18-01-28Z
        env:
        - name: MC_HOST_local
          value: "http://minioadmin:minioadmin123@minio-service.minio:9000"
        command:
        - /bin/bash
        - -c
        args:
        - |
          set -e
          echo "Configuring MinIO alias..."
          mc alias set local http://minio-service.minio:9000 minioadmin minioadmin123
          
          echo "Creating buckets..."
          mc mb --ignore-existing local/crypto-lakehouse-data
          mc mb --ignore-existing local/crypto-lakehouse-logs
          mc mb --ignore-existing local/crypto-lakehouse-artifacts
          mc mb --ignore-existing local/crypto-lakehouse-backups
          
          echo "Setting bucket policies..."
          mc anonymous set public local/crypto-lakehouse-data
          mc anonymous set public local/crypto-lakehouse-logs
          mc anonymous set download local/crypto-lakehouse-artifacts
          mc anonymous set none local/crypto-lakehouse-backups
          
          echo "Creating service account for s5cmd..."
          mc admin user add local s5cmd s5cmd123456
          mc admin policy attach local readwrite --user s5cmd
          
          echo "Setting up versioning for backups..."
          mc version enable local/crypto-lakehouse-backups
          
          echo "Setting up lifecycle policies..."
          cat > /tmp/lifecycle.json << 'EOF'
          {
            "Rules": [
              {
                "ID": "logs-cleanup",
                "Status": "Enabled",
                "Filter": {
                  "Prefix": "logs/"
                },
                "Expiration": {
                  "Days": 30
                }
              },
              {
                "ID": "temp-cleanup", 
                "Status": "Enabled",
                "Filter": {
                  "Prefix": "temp/"
                },
                "Expiration": {
                  "Days": 7
                }
              }
            ]
          }
          EOF
          mc lifecycle set /tmp/lifecycle.json local/crypto-lakehouse-data
          
          echo "MinIO setup completed successfully!"
          mc admin info local

---
# MinIO Service Account Secret
apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
  namespace: minio
type: Opaque
data:
  # s5cmd:s5cmd123456 base64 encoded
  access_key: czVjbWQ=
  secret_key: czVjbWQxMjM0NTY=
  endpoint: aHR0cDovL21pbmlvLXNlcnZpY2UubWluaW86OTAwMA==

---
# ConfigMap for MinIO Client Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-config
  namespace: minio
data:
  config.json: |
    {
      "version": "10",
      "aliases": {
        "local": {
          "url": "http://minio-service.minio:9000",
          "accessKey": "minioadmin",
          "secretKey": "minioadmin123",
          "api": "s3v4",
          "path": "auto"
        },
        "s5cmd": {
          "url": "http://minio-service.minio:9000", 
          "accessKey": "s5cmd",
          "secretKey": "s5cmd123456",
          "api": "s3v4",
          "path": "auto"
        }
      }
    }
  
  # Bucket policy templates
  public-policy.json: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "AWS": ["*"]
          },
          "Action": ["s3:GetObject"],
          "Resource": ["arn:aws:s3:::crypto-lakehouse-data/*"]
        }
      ]
    }
  
  readwrite-policy.json: |
    {
      "Version": "2012-10-17", 
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "AWS": ["*"]
          },
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::crypto-lakehouse-data",
            "arn:aws:s3:::crypto-lakehouse-data/*",
            "arn:aws:s3:::crypto-lakehouse-logs",
            "arn:aws:s3:::crypto-lakehouse-logs/*"
          ]
        }
      ]
    }