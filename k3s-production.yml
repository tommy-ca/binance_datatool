# Crypto Lakehouse Platform - Unified K3s Production Deployment
# Merged Infrastructure + Local-Dev Configurations following Specs-Driven Flow
# Version: 1.0.0 | Hive Mind Integration | Production Ready

---
# Namespace Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: crypto-lakehouse
  labels:
    name: crypto-lakehouse
    version: "1.0.0"
    environment: production
---
apiVersion: v1
kind: Namespace
metadata:
  name: crypto-lakehouse-monitoring
  labels:
    name: crypto-lakehouse-monitoring
    version: "1.0.0"
    environment: production
---
# =====================================================================================
# STORAGE CLASS - High-Performance Storage
# =====================================================================================
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast-ssd
  namespace: crypto-lakehouse
provisioner: rancher.io/local-path
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Retain
parameters:
  path: /opt/local-path-provisioner/fast-ssd
---
# =====================================================================================
# PERSISTENT VOLUMES - Production Storage
# =====================================================================================
apiVersion: v1
kind: PersistentVolume
metadata:
  name: minio-pv-1
  namespace: crypto-lakehouse
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /data/minio/storage1
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: crypto-lakehouse
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /data/postgres
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prometheus-pv
  namespace: crypto-lakehouse-monitoring
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /data/prometheus
---
# =====================================================================================
# SECRETS - Production Credentials
# =====================================================================================
apiVersion: v1
kind: Secret
metadata:
  name: crypto-lakehouse-secrets
  namespace: crypto-lakehouse
type: Opaque
data:
  # Base64 encoded credentials (admin/password123 for demo - replace in production)
  minio-root-user: YWRtaW4=
  minio-root-password: cGFzc3dvcmQxMjM=
  postgres-user: cHJlZmVjdA==
  postgres-password: cHJlZmVjdDEyMw==
  postgres-db: cHJlZmVjdA==
  s3-access-key: YWRtaW4=
  s3-secret-key: cGFzc3dvcmQxMjM=
---
# =====================================================================================
# CONFIGMAPS - Application Configuration
# =====================================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
  namespace: crypto-lakehouse-monitoring
data:
  otel-collector.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              static_configs:
                - targets: ['localhost:8888']
            - job_name: 'prefect-server'
              static_configs:
                - targets: ['prefect-server.crypto-lakehouse:4200']
            - job_name: 'minio'
              static_configs:
                - targets: ['minio.crypto-lakehouse:9000']
            - job_name: 's5cmd-service'
              static_configs:
                - targets: ['s5cmd-service.crypto-lakehouse:8080']
    
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
      memory_limiter:
        limit_mib: 256
    
    exporters:
      jaeger:
        endpoint: jaeger.crypto-lakehouse-monitoring:14250
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:8889"
    
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [jaeger]
        metrics:
          receivers: [otlp, prometheus]
          processors: [memory_limiter, batch]
          exporters: [prometheus]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: crypto-lakehouse-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    
    rule_files:
      - "crypto_lakehouse_rules.yml"
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector:8889']
      
      - job_name: 'prefect-server'
        static_configs:
          - targets: ['prefect-server.crypto-lakehouse:4200']
        metrics_path: '/api/admin/metrics'
      
      - job_name: 'minio'
        static_configs:
          - targets: ['minio.crypto-lakehouse:9000']
        metrics_path: '/minio/v2/metrics/cluster'
      
      - job_name: 's5cmd-service'
        static_configs:
          - targets: ['s5cmd-service.crypto-lakehouse:8080']
        metrics_path: '/metrics'
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
---
# =====================================================================================
# MINIO - Distributed Object Storage
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: crypto-lakehouse
  labels:
    app: minio
spec:
  ports:
    - port: 9000
      name: api
      targetPort: 9000
    - port: 9001
      name: console
      targetPort: 9001
  selector:
    app: minio
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  namespace: crypto-lakehouse
  labels:
    app: minio
spec:
  serviceName: minio
  replicas: 1  # Single node for demo - scale to 4+ for production
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9000"
        prometheus.io/path: "/minio/v2/metrics/cluster"
    spec:
      containers:
      - name: minio
        image: minio/minio:RELEASE.2024-07-16T23-46-41Z
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: minio-root-user
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: minio-root-password
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9001
          name: console
        volumeMounts:
        - name: data
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
# =====================================================================================
# POSTGRESQL - Primary Database
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: crypto-lakehouse
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: crypto-lakehouse
  labels:
    app: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets  
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF-8"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - prefect
            - -d
            - prefect
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - prefect
            - -d
            - prefect
          initialDelaySeconds: 5
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi
---
# =====================================================================================
# REDIS - Cache & Session Store
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: crypto-lakehouse
  labels:
    app: redis
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: crypto-lakehouse
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server", "--appendonly", "yes"]
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
---
# =====================================================================================
# PREFECT - Workflow Orchestration
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: prefect-server
  namespace: crypto-lakehouse
  labels:
    app: prefect-server
spec:
  ports:
    - port: 4200
      targetPort: 4200
      name: api
  selector:
    app: prefect-server
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server
  namespace: crypto-lakehouse
  labels:
    app: prefect-server
spec:
  replicas: 2  # HA configuration
  selector:
    matchLabels:
      app: prefect-server
  template:
    metadata:
      labels:
        app: prefect-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4200"
        prometheus.io/path: "/api/admin/metrics"
    spec:
      containers:
      - name: prefect-server
        image: prefecthq/prefect:3-latest
        command: ["prefect", "server", "start", "--host", "0.0.0.0", "--port", "4200"]
        env:
        - name: PREFECT_API_URL
          value: "http://prefect-server.crypto-lakehouse:4200/api"
        - name: PREFECT_SERVER_API_HOST
          value: "0.0.0.0"
        - name: PREFECT_API_DATABASE_CONNECTION_URL
          value: "postgresql+asyncpg://prefect:prefect123@postgres.crypto-lakehouse:5432/prefect"
        - name: PREFECT_EXPERIMENTAL_ENABLE_ARTIFACTS
          value: "true"
        - name: PREFECT_UI_SERVE_BASE
          value: "/"
        - name: PREFECT_LOGGING_LEVEL
          value: "INFO"
        # OpenTelemetry Integration
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.crypto-lakehouse-monitoring:4317"
        - name: OTEL_SERVICE_NAME
          value: "prefect-server"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=prefect-server,service.version=3.0.0,environment=production"
        ports:
        - containerPort: 4200
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 4200
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 4200
          initialDelaySeconds: 10
          periodSeconds: 10
---
# =====================================================================================
# PREFECT WORKER - Processing Pool
# =====================================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-worker
  namespace: crypto-lakehouse
  labels:
    app: prefect-worker
spec:
  replicas: 3  # Multiple workers for processing
  selector:
    matchLabels:
      app: prefect-worker
  template:
    metadata:
      labels:
        app: prefect-worker
    spec:
      containers:
      - name: prefect-worker
        image: prefecthq/prefect:3-latest
        command: ["prefect", "worker", "start", "--pool", "default-pool", "--type", "process"]
        env:
        - name: PREFECT_API_URL
          value: "http://prefect-server.crypto-lakehouse:4200/api"
        - name: PREFECT_LOGGING_LEVEL
          value: "INFO"
        # S3/MinIO Configuration
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: s3-access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: s3-secret-key
        - name: AWS_ENDPOINT_URL
          value: "http://minio.crypto-lakehouse:9000"
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        # OpenTelemetry Integration
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.crypto-lakehouse-monitoring:4317"
        - name: OTEL_SERVICE_NAME
          value: "prefect-worker"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=prefect-worker,service.version=3.0.0,environment=production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
---
# =====================================================================================
# s5cmd SERVICE - High-Performance S3 Operations
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: s5cmd-service
  namespace: crypto-lakehouse
  labels:
    app: s5cmd-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
      name: api
  selector:
    app: s5cmd-service  
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: s5cmd-service
  namespace: crypto-lakehouse
  labels:
    app: s5cmd-service
spec:
  replicas: 2  # HA configuration
  selector:
    matchLabels:
      app: s5cmd-service
  template:
    metadata:
      labels:
        app: s5cmd-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: s5cmd-service
        image: crypto-lakehouse/s5cmd-service:latest  # Custom built image
        env:
        # S3/MinIO Configuration
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: s3-access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: crypto-lakehouse-secrets
              key: s3-secret-key
        - name: AWS_ENDPOINT_URL
          value: "http://minio.crypto-lakehouse:9000"
        - name: AWS_DEFAULT_REGION
          value: "us-east-1"
        - name: S5CMD_NUMWORKERS
          value: "10"
        - name: S5CMD_RETRY_COUNT
          value: "3"
        # OpenTelemetry Integration
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector.crypto-lakehouse-monitoring:4317"
        - name: OTEL_SERVICE_NAME
          value: "s5cmd-service"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=s5cmd-service,service.version=2.2.2,environment=production"
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
---