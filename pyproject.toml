[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "crypto-data-lakehouse"
version = "2.0.0"
description = "A scalable data platform for cryptocurrency market data"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Crypto Data Lakehouse Team", email = "team@crypto-lakehouse.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
    "polars>=1.0.0",
    "typer>=0.15.0",
    "aiohttp>=3.11.0",
    "pydantic>=2.0.0",
    "prefect>=3.0.0",
    "s3fs>=2024.10.0",
    "boto3>=1.35.0",
    "duckdb>=1.1.0",
    "tqdm>=4.66.0",
    "python-dateutil>=2.9.0",
    "rich>=13.0.0",
    "ccxt>=4.0.0",
    "numpy>=1.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=24.0.0",
    "isort>=5.12.0",
    "ruff>=0.7.0",
    "mypy>=1.8.0",
    "pre-commit>=3.5.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.14",
    "psutil>=5.9.0",
]
aws = [
    "boto3>=1.35.0",
    "s3fs>=2024.10.0",
    "awscli>=1.36.0",
]
orchestration = [
    "prefect>=3.0.0",
    "dagster>=1.8.0",
]

[project.scripts]
crypto-lakehouse = "crypto_lakehouse.cli:app"

[project.urls]
Homepage = "https://github.com/crypto-lakehouse/crypto-data-lakehouse"
Documentation = "https://crypto-lakehouse.readthedocs.io"
Repository = "https://github.com/crypto-lakehouse/crypto-data-lakehouse"
Issues = "https://github.com/crypto-lakehouse/crypto-data-lakehouse/issues"

[tool.uv]
# Modern UV configuration - use [project.optional-dependencies] instead
package = true

[tool.hatch.build.targets.wheel]
packages = ["src/crypto_lakehouse"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]
exclude = [
    "/.git",
    "/.pytest_cache",
    "/.mypy_cache",
    "/legacy",
    "*.pyc",
    "*.pyo",
    "*.pyd",
    "__pycache__",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=crypto_lakehouse",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["crypto_lakehouse"]
omit = [
    "tests/*",
    "legacy/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | legacy
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["crypto_lakehouse"]
skip_glob = ["legacy/*"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "legacy/",
    "tests/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "polars.*",
    "prefect.*",
    "s3fs.*",
    "duckdb.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "T20", # flake8-print
]
ignore = [
    "S101",  # Use of assert detected
    "S603",  # subprocess call: check for execution of untrusted input
    "S607",  # Starting a process with a partial executable path
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "legacy",
    ".venv",
    ".eggs",
    "*.egg",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "T20"]  # Allow asserts and prints in tests