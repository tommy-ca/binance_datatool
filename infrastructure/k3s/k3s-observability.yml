# Crypto Lakehouse Platform - K3s Observability Stack
# OpenTelemetry + Jaeger + Prometheus + Grafana
# Part 2 of Unified K3s Production Deployment

---
# =====================================================================================
# OPENTELEMETRY COLLECTOR - Metrics & Traces
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  namespace: crypto-lakehouse-monitoring
  labels:
    app: otel-collector
spec:
  ports:
    - port: 4317
      name: otlp-grpc
      targetPort: 4317
    - port: 4318
      name: otlp-http
      targetPort: 4318
    - port: 8888
      name: prometheus
      targetPort: 8888
    - port: 8889
      name: metrics
      targetPort: 8889
    - port: 13133
      name: health
      targetPort: 13133
  selector:
    app: otel-collector
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  namespace: crypto-lakehouse-monitoring
  labels:
    app: otel-collector
spec:
  replicas: 2  # HA configuration
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8888"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: otel-collector
        image: otel/opentelemetry-collector-contrib:latest
        command: ["--config=/etc/otelcol-contrib/otel-collector.yaml"]
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 8888
          name: prometheus
        - containerPort: 8889
          name: metrics
        - containerPort: 13133
          name: health
        volumeMounts:
        - name: config
          mountPath: /etc/otelcol-contrib/otel-collector.yaml
          subPath: otel-collector.yaml
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: otel-collector-config
---
# =====================================================================================
# JAEGER - Distributed Tracing
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: crypto-lakehouse-monitoring
  labels:
    app: jaeger
spec:
  ports:
    - port: 16686
      name: ui
      targetPort: 16686
    - port: 14250
      name: grpc
      targetPort: 14250
    - port: 14268
      name: http
      targetPort: 14268
    - port: 6831
      name: udp-compact
      targetPort: 6831
      protocol: UDP
    - port: 6832
      name: udp-binary
      targetPort: 6832
      protocol: UDP
  selector:
    app: jaeger
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  namespace: crypto-lakehouse-monitoring
  labels:
    app: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:latest
        env:
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        ports:
        - containerPort: 16686
          name: ui
        - containerPort: 14250
          name: grpc
        - containerPort: 14268
          name: http
        - containerPort: 6831
          name: udp-compact
          protocol: UDP
        - containerPort: 6832
          name: udp-binary
          protocol: UDP
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 5
          periodSeconds: 10
---
# =====================================================================================
# PROMETHEUS - Metrics Collection
# =====================================================================================
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: crypto-lakehouse-monitoring
  labels:
    app: prometheus
spec:
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: crypto-lakehouse-monitoring
  labels:
    app: prometheus
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=168h'
        - '--web.enable-lifecycle'
        - '--storage.tsdb.no-lockfile'
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus/prometheus.yml
          subPath: prometheus.yml
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: prometheus-config
  volumeClaimTemplates:
  - metadata:
      name: prometheus-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 20Gi
---
# =====================================================================================
# GRAFANA - Metrics Visualization
# =====================================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: crypto-lakehouse-monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    root_url = http://localhost:3000/
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: crypto-lakehouse-monitoring
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus.crypto-lakehouse-monitoring:9090
      access: proxy
      isDefault: true
      editable: true
    - name: Jaeger
      type: jaeger
      url: http://jaeger.crypto-lakehouse-monitoring:16686
      access: proxy
      editable: true
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: crypto-lakehouse-monitoring
  labels:
    app: grafana
spec:
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: crypto-lakehouse-monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources/prometheus.yml
          subPath: prometheus.yml
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: grafana-data
        emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
# =====================================================================================
# INGRESS - External Access (Production)
# =====================================================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: crypto-lakehouse-ingress
  namespace: crypto-lakehouse
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.middlewares: default-auth@kubernetescrd
spec:
  rules:
  - host: prefect.crypto-lakehouse.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prefect-server
            port:
              number: 4200
  - host: minio.crypto-lakehouse.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio
            port:
              number: 9001
  - host: s5cmd.crypto-lakehouse.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: s5cmd-service
            port:
              number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: crypto-lakehouse-monitoring-ingress
  namespace: crypto-lakehouse-monitoring
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.middlewares: default-auth@kubernetescrd
spec:
  rules:
  - host: jaeger.crypto-lakehouse.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger
            port:
              number: 16686
  - host: prometheus.crypto-lakehouse.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
  - host: grafana.crypto-lakehouse.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
---
# =====================================================================================
# NETWORK POLICIES - Production Security
# =====================================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: crypto-lakehouse-network-policy
  namespace: crypto-lakehouse
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse-monitoring
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse-monitoring
  - to: []  # Allow all external egress for S3 access
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: crypto-lakehouse-monitoring-network-policy
  namespace: crypto-lakehouse-monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse-monitoring
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse
    - namespaceSelector:
        matchLabels:
          name: crypto-lakehouse-monitoring